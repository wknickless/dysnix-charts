name: NiFi Registry

on:
  push:
    paths:
      - '.github/workflows/nifi-registry-tests.yaml'
      - 'dysnix/nifi-registry/**'

jobs:
  test-cert-manager-initial-administrator:
    name: Test NiFi Registry cert-manager with Initial Administrator and Certificate Renewal
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Minikube.
        uses: manusa/actions-setup-minikube@v2.4.1
        with:
          minikube version: 'v1.20.0'
          kubernetes version: 'v1.20.2'
      - name: Install SOCKS5 Proxy
        run: |
          cd dysnix/nifi-registry
          kubectl apply -f tests/01-oidc-test-framework/socks5.yaml
          kubectl rollout status --watch --timeout=600s statefulset/socks5
      - name: Install cert-manager
        run: |
          cd dysnix/nifi-registry
          tests/00-install-cert-manager.bash
      - name: Install NiFi Registry
        run: |
          cd dysnix/nifi-registry
          helm install nifi-registry . -f tests/00-cert-manager-values.yaml
          kubectl rollout status --watch --timeout=600s statefulset/nifi-registry
      - name: Confirm Initial Administrator Configuration
        run: |
          cd dysnix/nifi-registry
          kubectl get secret nifi-registry-client -o json | jq -r '.data."tls.key"' | base64 -d > /tmp/tls.key
          kubectl get secret nifi-registry-client -o json | jq -r '.data."tls.crt"' | base64 -d > /tmp/tls.crt
          export K8SNODEIP=$(kubectl get node -o json | jq -r '.items[0].status.addresses[0].address')
          export K8SSOCKS5PORT=$(kubectl get svc socks5 -o json | jq -r '.spec.ports[0].nodePort')
          curl --insecure \
               --url https://nifi-registry:18443/nifi-registry-api/access \
               --cert /tmp/tls.crt \
               --key /tmp/tls.key \
               --socks5-hostname "$K8SNODEIP":"$K8SSOCKS5PORT" | \
            jq | \
            diff -c tests/00-initial-administrator-results.json -
      - name: Confirm Restart on Certificate Renewal
        run: |
          cd dysnix/nifi-registry
          kubectl get secret nifi-registry-client -o json | jq -r '.data."tls.key"' | base64 -d > /tmp/tls.key
          kubectl get secret nifi-registry-client -o json | jq -r '.data."tls.crt"' | base64 -d > /tmp/tls.crt
          export K8SNODEIP=$(kubectl get node -o json | jq -r '.items[0].status.addresses[0].address')
          export K8SSOCKS5PORT=$(kubectl get svc socks5 -o json | jq -r '.spec.ports[0].nodePort')
          OLDCERTSTART=$(curl --insecure \
                              --verbose \
                              --url https://nifi-registry:18443/nifi-registry-api/access \
                              --cert /tmp/tls.crt \
                              --key /tmp/tls.key \
                              --socks5-hostname "$K8SNODEIP":"$K8SSOCKS5PORT" 2>&1 | \
                         /bin/grep start)
          echo Old Certificate "$OLDCERTSTART"
          cmctl renew nifi-registry-0
          for n in [ 0 1 2 3 4 5 6 7 8 9 ]
          do
            sleep 30
            NEWCERTSTART=$(curl --insecure \
                              --verbose \
                              --url https://nifi-registry:18443/nifi-registry-api/access \
                              --cert /tmp/tls.crt \
                              --key /tmp/tls.key \
                              --socks5-hostname "$K8SNODEIP":"$K8SSOCKS5PORT" 2>&1 | \
                           /bin/grep start || echo NiFi Registry connect failure)
            echo New Certificate "$NEWCERTSTART"
              if [ \""$OLDCERTSTART"\" != \""$NEWCERTSTART"\" ]
              then
                exit 0
              fi
          done
          echo Certificate did not update for 300 seconds!
          exit 1

  oidc-login:
    name: OIDC Login
    runs-on: ubuntu-latest
    steps:
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.4.1
        with:
          minikube version: 'v1.20.0'
          kubernetes version: 'v1.20.2'
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Install dependencies
        run: |
          curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
          sudo bash nodesource_setup.sh
          sudo apt-get install -y jq yarn
          yarn add puppeteer-core --cwd $HOME
          yarn add chai --cwd $HOME
          yarn add mocha --cwd $HOME
      - name: Install test framework components
        run: |
          cd dysnix/nifi-registry
          kubectl apply -f tests/01-oidc-test-framework
          tests/00-install-cert-manager.bash
          kubectl rollout status --timeout=20m --watch statefulset/keycloak
          tests/01-oidc-keycloak-setup.bash
          kubectl rollout status --timeout=20m --watch statefulset/browserless
          kubectl rollout status --timeout=20m --watch statefulset/socks5
      - name: Install Nifi Registry
        run: |
          cd dysnix/nifi-registry
          helm install nifi-registry . -f tests/01-oidc-registry-values.yaml
          kubectl rollout status --timeout=20m --watch statefulset/nifi-registry
      - name: Check that OIDC login works
        run: |
          cd dysnix/nifi-registry
          tests/01-oidc-login-test-script.sh
      - name: Archive screenshots
        if: ${{ success() || failure() || cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: oidc-login
          path: ~/screenshots/

  oidc-ssh-git-nifi:
    name: OIDC Login, SSH Git, with NiFi
    runs-on: ubuntu-latest
    steps:
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.4.1
        with:
          minikube version: 'v1.20.0'
          kubernetes version: 'v1.20.2'
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Install dependencies
        run: |
          curl -sL https://deb.nodesource.com/setup_16.x -o nodesource_setup.sh
          sudo bash nodesource_setup.sh
          sudo apt-get install -y jq yarn
          yarn add puppeteer-core --cwd $HOME
          yarn add chai --cwd $HOME
          yarn add mocha --cwd $HOME
      - name: Install test framework components
        run: |
          cd dysnix/nifi-registry
          tests/02-configmaps.sh
          tests/02-ssh-keygen.sh
          kubectl apply -f tests/02-git-repository.yaml
          kubectl apply -f tests/01-oidc-test-framework
          tests/00-install-cert-manager.bash
          kubectl rollout status --timeout=20m --watch statefulset/keycloak
          minikube addons enable ingress
          kubectl apply -f tests/02-increase-webhook-timeout.yaml
          tests/01-oidc-keycloak-setup.bash
          kubectl rollout status --timeout=20m --watch statefulset/browserless
          kubectl rollout status --timeout=20m --watch statefulset/socks5
          kubectl rollout status --timeout=20m --watch statefulset/git
      - name: Get NiFi Helm Chart
        run: |
          cd $HOME
          # CHART_UPSTREAM_REPO="https://github.com/cetic/helm-nifi.git"
          # CHART_UPSTREAM_CHECKOUT="1.0.4"
          # Replace the below with above when https://github.com/cetic/helm-nifi/pull/218 is merged
          CHART_UPSTREAM_REPO="https://github.com/wknickless/helm-nifi.git"
          CHART_UPSTREAM_CHECKOUT="7f4dda59f1aa4f9918018d6c8dd5ec6fc3da9a28"
          git clone "$CHART_UPSTREAM_REPO" helm-nifi
          cd helm-nifi
          git checkout "$CHART_UPSTREAM_CHECKOUT"
          helm dep update
      - name: Install Nifi Registry and NiFi
        run: |
          cd dysnix/nifi-registry
          helm install nifi-registry . -f tests/02-registry-values.yaml
          helm install nifi $HOME/helm-nifi -f tests/02-nifi-values.yaml
          kubectl rollout status --timeout=20m --watch statefulset/nifi-registry
          kubectl rollout status --timeout=20m --watch statefulset/nifi
      - name: Create NiFi Registry Bucket
        run: |
          cd dysnix/nifi-registry
          tests/02-registry-create-bucket-script.sh
      - name: Put NiFi Process Group Under Version Control
        run: |
          cd dysnix/nifi-registry
          tests/02-nifi-version-control-script.sh
      - name: Confirm Flow was checked in to git
        run: |
          kubectl exec git-0 -- git clone /home/git/nifi-flows.git /root/nifi-flows
          kubectl exec git-0 -- cat /root/nifi-flows/foo/bucket.yml | grep 'at least not much'
      - name: Archive screenshots
        if: ${{ success() || failure() || cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: oidc-ssh-git-nifi
          path: ~/screenshots/
