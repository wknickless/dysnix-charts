apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "nifi-registry.fullname" . }}
  labels:
    {{- include "nifi-registry.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "nifi-registry.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "nifi-registry.fullname" . }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "nifi-registry.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nifi-registry.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.certManager.enabled }}
      {{/* Need to restart pod when TLS certificate is updated */}}
      shareProcessNamespace: true
      {{- /* if .Values.certManager.enabled */}}{{ end }}
      initContainers:
        {{- if .Values.flowProvider.git.enabled }}
        - name: git-clone
          image: "{{ .Values.initContainers.git.image }}:{{ .Values.initContainers.git.tag }}"
          command:
            - sh
            - -cex
            - |
              git clone $(NIFI_REGISTRY_GIT_URL) "/tmp/flow_storage" || git -C "/tmp/flow_storage" pull
              cp --dereference /ssh/id_rsa /ssh-dest/

              chown -R 1000:1000 /tmp/flow_storage /ssh-dest
          env:
            - name: NIFI_REGISTRY_GIT_URL
              value: {{ .Values.flowProvider.git.url }}
            - name: NIFI_REGISTRY_GIT_USER
              value: {{ .Values.flowProvider.git.user }}
            - name: NIFI_REGISTRY_GIT_PASSWORD
              value: {{ .Values.flowProvider.git.password }}
          {{- if .Values.initContainers.extraEnvs }}
            {{ toYaml .Values.initContainers.extraEnvs | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: "flow-storage"
              mountPath: /tmp
            {{- if .Values.ssh.known_hosts }}
            - name: sshcfgmap
              mountPath: /root/.ssh
              readOnly: true
            {{- end }}
            - name: git-key
              mountPath: /ssh
              readOnly: true
            - name: git-key-fixed
              mountPath: /ssh-dest
        {{- end }}
        {{- if .Values.persistence.enabled }}
        - name: take-data-dir-ownership
          image: "{{ .Values.initContainers.alpine.image }}:{{ .Values.initContainers.alpine.tag }}"
          command:
            - chown
            - -R
            - 1000:1000
            - /opt/nifi-registry/nifi-registry-current/database
            - /opt/nifi-registry/nifi-registry-current/flow_storage
          volumeMounts:
            - name: "database"
              mountPath: /opt/nifi-registry/nifi-registry-current/database
            - name: "flow-storage"
              mountPath: /opt/nifi-registry/nifi-registry-current/flow_storage
              subPath: flow_storage
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - bash
            - -ce
            - |
            {{- if .Values.flowProvider.postgres.enabled }}
              cd /opt/nifi-registry/nifi-registry-current/ext
              mkdir postgresql
              cd postgresql
              curl -k "{{ .Values.flowProvider.postgres.driverURL }}{{ .Values.flowProvider.postgres.fileName }}" -o "{{ .Values.flowProvider.postgres.fileName }}"
            {{- end }}
            {{- if .Values.ssh.known_hosts }}
              cp --verbose --dereference /sshcfgmap/known_hosts /home/nifi/.ssh/
              {{- if .Values.ssh.config }}
                cp --verbose --dereference /sshcfgmap/config /home/nifi/.ssh/
              {{- end }}
              {{- if .Values.flowProvider.git.enabled }}
                cp --verbose --dereference /ssh/id_rsa /home/nifi/.ssh/
              {{- end }}
            {{- end }}

          {{/*
              Following the pattern of the Apache-provided scripts that turn
              on secure mode, we use the prop_replace macro and xmlstarlet
              to set parameters rather than templating (e.g.) nifi-registry.properties.
              This should reduce the chance that defaults set by Apache in future
              versions don't break things and have to be back ported.
          */}}
              . ${NIFI_REGISTRY_BASE_DIR}/scripts/common.sh

           {{- if .Values.certManager.enabled }}
              # Note opportunity here to inject additional trusted certs named ca.crt in other
              # subdirectories of /opt/nifi/nifi-current/tls/, using custom secrets and/or configmaps.
              # If any of those trusted certs expire then you will need to restart the pod to pick
              # them up, as the truststore is only created at pod startup and Kubernetes won't
              # update secrets mounted as subPaths anyway.
              # c.f. https://kubernetes.io/docs/concepts/storage/volumes/#secret
              /bin/rm -fv "${NIFI_REGISTRY_HOME}/tls/truststore.jks" \
                          "${NIFI_REGISTRY_HOME}/tls/keystore.jks" \
                          "/tmp/tls.p12"
              for ca in "${NIFI_REGISTRY_HOME}"/tls/*/ca.crt
              do
                ALIAS=$(echo $ca | awk -F "/" '{print $(NF-1) }' -)
                keytool -import \
                        -noprompt \
                        -trustcacerts \
                        -alias $ALIAS \
                        -file $ca \
                        -keystore "${NIFI_REGISTRY_HOME}/tls/truststore.jks" \
                        -storepass "{{ .Values.certManager.truststorePasswd }}"
              done
              keytool -list -keystore "${NIFI_REGISTRY_HOME}/tls/truststore.jks" \
                          -storepass "{{ .Values.certManager.truststorePasswd }}"

              openssl pkcs12 -export -in      "${NIFI_REGISTRY_HOME}/tls/cert-manager/tls.crt" \
                                     -inkey   "${NIFI_REGISTRY_HOME}/tls/cert-manager/tls.key" \
                                     -name    "$(hostname)" \
                                     -out     "/tmp/tls.p12" \
                                     -passout "pass:{{ .Values.certManager.keystorePasswd }}"
              keytool -importkeystore \
                      -noprompt \
                      -destkeystore "${NIFI_REGISTRY_HOME}/tls/keystore.jks" \
                      -srckeystore "/tmp/tls.p12" \
                      -srcstoretype PKCS12 \
                      -srcstorepass "{{ .Values.certManager.keystorePasswd }}" \
                      -deststorepass "{{ .Values.certManager.keystorePasswd }}"
              keytool -list -keystore "${NIFI_REGISTRY_HOME}/tls/keystore.jks" \
                            -storepass "{{ .Values.certManager.keystorePasswd }}"
          {{- /* if .Values.certManager.enabled */}}{{ end }}

          {{ if .Values.oidc.enabled }}
              prop_replace nifi.registry.security.user.oidc.discovery.url {{ .Values.oidc.discoveryUrl }}
              prop_replace nifi.registry.security.user.oidc.client.id {{ .Values.oidc.clientId }}
              prop_replace nifi.registry.security.user.oidc.client.secret {{ .Values.oidc.clientSecret }}
              prop_replace nifi.registry.security.user.oidc.claim.identifying.user {{ .Values.oidc.claimIdentifyingUser }}
          {{- /* if .Values.oidc.enabled */}}{{ end }}

          {{ if .Values.security.enabled }}
              prop_replace nifi.registry.security.needClientAuth "{{ .Values.security.needClientAuth }}"
              xmlstarlet ed --inplace --update "//authorizers/userGroupProvider/property[@name='Users File']" -v './auth-conf/users.xml' "${NIFI_REGISTRY_HOME}/conf/authorizers.xml"
              xmlstarlet ed --inplace --update "//authorizers/accessPolicyProvider/property[@name='Authorizations File']" -v './auth-conf/authorizations.xml' "${NIFI_REGISTRY_HOME}/conf/authorizers.xml"
              xmlstarlet ed --inplace --update "//authorizers/accessPolicyProvider/property[@name='Initial Admin Identity']" -v '{{ .Values.security.admin }}' "${NIFI_REGISTRY_HOME}/conf/authorizers.xml"
              xmlstarlet ed --inplace --update "//authorizers/userGroupProvider/property[@name='Initial User Identity 1']" -v '{{ .Values.security.admin }}' "${NIFI_REGISTRY_HOME}/conf/authorizers.xml"

              # Shamelessly stolen from $NIFI_REGISTRY_BASE_DIR/scripts/secure.sh
              # and $NIFI_REGISTRY_BASE_DIR/scripts/start.sh

              scripts_dir='/opt/nifi-registry/scripts'
              . "${scripts_dir}/update_database.sh"
              . "${scripts_dir}/update_flow_provider.sh"
              . "${scripts_dir}/update_bundle_provider.sh"

              prop_replace 'nifi.registry.security.keystore'           "${KEYSTORE_PATH}"
              prop_replace 'nifi.registry.security.keystoreType'       "${KEYSTORE_TYPE}"
              prop_replace 'nifi.registry.security.keystorePasswd'     "${KEYSTORE_PASSWORD}"
              prop_replace 'nifi.registry.security.keyPasswd'          "${KEY_PASSWORD:-$KEYSTORE_PASSWORD}"
              prop_replace 'nifi.registry.security.truststore'         "${TRUSTSTORE_PATH}"
              prop_replace 'nifi.registry.security.truststoreType'     "${TRUSTSTORE_TYPE}"
              prop_replace 'nifi.registry.security.truststorePasswd'   "${TRUSTSTORE_PASSWORD}"

              # Disable HTTP and enable HTTPS
              prop_replace 'nifi.registry.web.http.port'   ''
              prop_replace 'nifi.registry.web.http.host'   ''
              prop_replace 'nifi.registry.web.https.port'  "${NIFI_REGISTRY_WEB_HTTPS_PORT:-18443}"
              prop_replace 'nifi.registry.web.https.host'  "${NIFI_REGISTRY_WEB_HTTPS_HOST:-$HOSTNAME}"
          {{- /* if .Values.security.enabled */}}{{ end }}

              # Log everything to the console, not to files
              xmlstarlet ed --inplace --delete "//configuration/logger/appender-ref[@ref='CONSOLE']" "${NIFI_REGISTRY_HOME}/conf/logback.xml"
              xmlstarlet ed --inplace --update "//configuration/logger/appender-ref[@ref='BOOTSTRAP_FILE']/@ref" -v CONSOLE "${NIFI_REGISTRY_HOME}/conf/logback.xml"
              xmlstarlet ed --inplace --update "//configuration/logger/appender-ref[@ref='EVENTS_FILE']/@ref" -v CONSOLE "${NIFI_REGISTRY_HOME}/conf/logback.xml"
              xmlstarlet ed --inplace --update "//configuration/logger/appender-ref[@ref='APP_FILE']/@ref" -v CONSOLE "${NIFI_REGISTRY_HOME}/conf/logback.xml"
              xmlstarlet ed --inplace --update "//configuration/root/appender-ref[@ref='APP_FILE']/@ref" -v CONSOLE "${NIFI_REGISTRY_HOME}/conf/logback.xml"

              exec ${NIFI_REGISTRY_HOME}/bin/nifi-registry.sh run
          ports:
          {{ if .Values.security.enabled }}
            - name: https
              containerPort: {{ .Values.security.httpsPort }}
              protocol: TCP
          {{/* if .Values.security.enabled */}}{{ else }}
            - name: http
              containerPort: 18080
              protocol: TCP
          {{/* if .Values.security.enabled */}}{{ end }}
          env:
          {{- if .Values.flowProvider.git.enabled }}
            - name: NIFI_REGISTRY_FLOW_PROVIDER
              value: git
            - name: NIFI_REGISTRY_GIT_REMOTE
              value: {{ .Values.flowProvider.git.remote }}
            - name: NIFI_REGISTRY_GIT_USER
              value: {{ .Values.flowProvider.git.user }}
            - name: NIFI_REGISTRY_GIT_PASSWORD
              value: {{ .Values.flowProvider.git.password }}
          {{- end }}
          {{- if .Values.flowProvider.postgres.enabled }}
            - name: NIFI_REGISTRY_FLOW_PROVIDER
              value: postgres
            - name: NIFI_REGISTRY_DB_DIR
              value: ./ext/postgresql
            - name: NIFI_REGISTRY_DB_CLASS
              value: {{ .Values.flowProvider.postgres.driverClass }}
            - name: NIFI_REGISTRY_DB_URL
              value: {{ .Values.flowProvider.postgres.url }}
            - name: NIFI_REGISTRY_DB_USER
              value: {{ .Values.flowProvider.postgres.username }}
            - name: NIFI_REGISTRY_DB_PASS
              value: {{ .Values.flowProvider.postgres.password }}
          {{- end }}
          {{- if .Values.certManager.enabled }}
            - name: KEYSTORE_PATH
              value: /opt/nifi-registry/nifi-registry-current/tls/keystore.jks
            - name: KEYSTORE_TYPE
              value: JKS
            - name: KEYSTORE_PASSWORD
              value: {{ .Values.certManager.keystorePasswd | quote }}
            - name: TRUSTSTORE_PATH
              value: /opt/nifi-registry/nifi-registry-current/tls/truststore.jks
            - name: TRUSTSTORE_TYPE
              value: JKS
            - name: TRUSTSTORE_PASSWORD
              value: {{ .Values.certManager.truststorePasswd | quote }}
          {{- /* if .Values.certManager.enabled */}}{{ end }}
          {{- if .Values.security.enabled }}
            - name: NIFI_REGISTRY_WEB_HTTPS_PORT
              value: {{ .Values.security.httpsPort | quote }}
            - name: NIFI_REGISTRY_WEB_HTTPS_HOST
              value: {{ .Values.security.httpsHost | quote }}
            - name: INITIAL_ADMIN_IDENTITY
              value: {{ .Values.security.admin | quote }}
            - name: AUTH
              value: "tls"
          {{- /* if .Values.security.enabled */}}{{ end }}
          {{- if .Values.extraEnvs }}
            {{ toYaml .Values.extraEnvs | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{ if .Values.persistence.enabled }}
            - name: "database"
              mountPath: /opt/nifi-registry/nifi-registry-current/database
            {{ end }}
            {{ if or .Values.persistence.enabled .Values.flowProvider.git.enabled }}
            - name: "flow-storage"
              mountPath: /opt/nifi-registry/nifi-registry-current/flow_storage
              subPath: flow_storage
            {{ end }}
            {{- if .Values.ssh.known_hosts }}
            - name: sshcfgmap
              mountPath: /sshcfgmap
              readOnly: true
            - name: sshdir
              mountPath: /home/nifi/.ssh
              readOnly: false
            {{- end }}
            {{- if .Values.flowProvider.git.enabled }}
            {{- if .Values.flowProvider.git.config.enabled }}
            - name: git-config
              mountPath: /home/nifi/.gitconfig
              subPath: gitconfig
              readOnly: true
            {{- end }}
            - name: git-key-fixed
              mountPath: /ssh
              readOnly: true
            {{- end }}
            {{- if .Values.certManager.enabled }}
            # FIXME - cert-manager support limited to a single pod statefulset
            - name: "tls"
              mountPath: /opt/nifi-registry/nifi-registry-current/tls
            - name: {{ include "nifi-registry.fullname" . }}-0
              mountPath: /opt/nifi-registry/nifi-registry-current/tls/cert-manager
            {{ range $secret := .Values.certManager.caSecrets }}
            - name: {{ include "nifi-registry.fullname" $ }}-{{ $secret }}
              mountPath: /opt/nifi-registry/nifi-registry-current/tls/{{ $secret }}
              readOnly: true
            {{ end }}
            - name: "run"
              mountPath: /opt/nifi-registry/nifi-registry-current/run
            {{- /* if .Values.certManager.enabled */}}{{ end }}
            {{- if .Values.security.enabled }}
            - name: "auth-conf"
              mountPath: /opt/nifi-registry/nifi-registry-current/auth-conf
              readOnly: false
            {{- /* if .Values.security.enabled */}}{{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          readinessProbe:
            tcpSocket:
          {{ if .Values.security.enabled }}
              port: {{ .Values.security.httpsPort }}
          {{/* if .Values.security.enabled */}}{{ else }}
              port: 18080
          {{/* if .Values.security.enabled */}}{{ end }}
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 2
            failureThreshold: 3
      {{- if .Values.certManager.enabled }}
        - name: cert-manager
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command:
          - bash
          - -ce
          - |
            trap "exit 0" TERM

            cp /opt/nifi-registry/nifi-registry-current/tls/cert-manager/tls.crt /tmp/tls.crt

            while :
            do
              if ! diff /opt/nifi-registry/nifi-registry-current/tls/cert-manager/tls.crt /tmp/tls.crt
              then
                echo Terminating pod to pick up new certificate.
                echo It would be nice for Registry to have nifi.registry.security.autoreload, eh?
                bin/nifi-registry.sh stop
                exit 0
              fi
              echo Starting to sleep for {{ .Values.certManager.refreshSeconds }} seconds at $(date)
              sleep {{ .Values.certManager.refreshSeconds }}
            done
          volumeMounts:
              # FIXME - cert-manager support limited to a single pod statefulset
            - name: {{ include "nifi-registry.fullname" $ }}-0
              mountPath: /opt/nifi-registry/nifi-registry-current/tls/cert-manager
              readOnly: true
            - name: "run"
              mountPath: /opt/nifi-registry/nifi-registry-current/run
          resources:
{{ toYaml .Values.certManager.resources | indent 12 }}
        {{- /* if .Values.certManager.enabled */}}{{ end }}
      volumes:
        {{- if .Values.ssh.known_hosts }}
        - name: sshdir
          emptyDir: {}
        - name: sshcfgmap
          configMap:
            name: {{ template "nifi-registry.fullname" . }}-ssh-config
            defaultMode: 0644
        {{- end }}
        {{- if .Values.flowProvider.git.enabled }}
        {{- if not .Values.persistence.enabled }}
        - name: flow-storage
          emptyDir: {}
        {{- end }}
        {{- if .Values.flowProvider.git.config.enabled }}
        - name: git-config
          secret:
            secretName: {{ include "flowProvider.git.config.secretName" . }}
            defaultMode: 0400
        {{- end }}
        - name: git-key
          secret:
            {{- if .Values.flowProvider.git.secretName }}
            secretName: {{ .Values.flowProvider.git.secretName }}
            {{- else }}
            secretName: {{ template "nifi-registry.fullname" . }}-git-deploy
            {{- end }}
            defaultMode: 0400
        - name: git-key-fixed
          emptyDir: {}
        {{- end }}
      {{- if .Values.certManager.enabled }}
      - name: tls
        emptyDir: {}
      - name: run
        emptyDir: {}
      - name: {{ include "nifi-registry.fullname" $ }}-0
        secret:
          secretName: {{ include "nifi-registry.fullname" $ }}-0
      {{- range .Values.certManager.caSecrets }}
      - name: {{ include "nifi-registry.fullname" $ }}-{{ . }}
        secret:
          secretName: {{ . }}
      {{- end }}
      {{- /* if .Values.certManager.enabled */}}{{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  {{ if .Values.persistence.enabled }}
  - metadata:
      name: database
    spec:
      accessModes:
      - ReadWriteOnce
      {{ if .Values.persistence.database.storageClass }}
      {{ if (eq "-" .Values.persistence.database.storageClass) }}
      storageClassName: ""
      {{ else }}
      storageClassName: "{{ .Values.persistence.database.storageClass }}"
      {{ end }}
      {{ end }}
      resources:
        requests:
          storage: {{ .Values.persistence.database.size | quote }}
  - metadata:
      name: flow-storage
    spec:
      accessModes:
      - ReadWriteOnce
      {{ if .Values.persistence.flowStorage.storageClass }}
      {{ if (eq "-" .Values.persistence.flowStorage.storageClass) }}
      storageClassName: ""
      {{ else }}
      storageClassName: "{{ .Values.persistence.flowStorage.storageClass }}"
      {{ end }}
      {{ end }}
      resources:
        requests:
          storage: {{ .Values.persistence.flowStorage.size | quote }}
  {{ end }}
  {{ if .Values.security.enabled }}
  - metadata:
      name: auth-conf
    spec:
      accessModes:
      - ReadWriteOnce
      {{ if .Values.security.persistence.storageClass }}
      {{ if (eq "-" .Values.security.persistence.storageClass) }}
      storageClassName: ""
      {{ else }}
      storageClassName: "{{ .Values.security.persistence.storageClass }}"
      {{ end }}
      {{ end }}
      resources:
        requests:
          storage: {{ .Values.security.persistence.size | quote }}
  {{/* if .Values.security.enabled */}}{{end}}
